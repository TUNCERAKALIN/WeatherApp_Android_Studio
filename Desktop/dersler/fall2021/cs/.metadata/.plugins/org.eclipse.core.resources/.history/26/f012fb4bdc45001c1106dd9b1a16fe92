
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;

import javax.swing.JPanel;


	public class BetsyFlag extends JPanel {
		 
		  public void paintComponent(Graphics g) {
		    Graphics2D g2 = (Graphics2D) g;
		 
		    double height = super.getSize().getHeight();;
		    double width = super.getSize().getWidth();
		 
		    double rw = .6 * width;
		    double xc = .4 * width;
		 
		    g2.setPaint(Color.BLUE);
		    g2.fill(new Rectangle2D.Double(0, 0, .4 * width, .53846 * height));
		 
		    for (int i = 0; i < 13; i++) {
		      if (i == 7) {
		        xc = 0;
		        rw = width;
		      }
		 
		      if (i % 2 == 0) {
		        g2.setPaint(Color.RED);
		      } else {
		        g2.setPaint(Color.WHITE);
		      }
		 
		      g2.fill(new Rectangle2D.Double(xc, i * .0769 * height, rw, .0769 * height));
		    }
		 
		    double x[] = {
		      .0002105 * width, .0126 * width, .0163 * width, .02 * width, .0324 * width,
		      .0217 * width, .02574 * width, .0163 * width, .0069 * width, .0109 * width
		    };
		    double y[] = {
		      .02 * height, .02 * height, 0, .02 * height, .02 * height, 
		      .03 * height, .05 * height, .04 * height, .05 * height, .03 * height
		    };
		 
		    GeneralPath star = new GeneralPath();
		 
		    star.moveTo((float) x[0], (float) y[0]);
		 
		    for (int i = 1; i < x.length; i++) {
		      star.lineTo((float) x[i], (float) y[i]);
		    }
		 
		    star.closePath();
		 
//		    g2.translate(.18 * width, (.25) * height);
//		    g2.setPaint(Color.WHITE);
//		    g2.fill(star);
		    
		        
		        //size of circle
		        int a = (int) (0.20*width);
		        int b =(int) (0.28*height);
		        //get smaller side
		        int m = (Math.min(a, b));
		        
		        int r =  4*m / 5;
		        int r2 = (Math.abs(m - r))/ 2;
		        
		        g2.setColor(Color.white);
		        for (int i = 0; i < 13; i++) {
		            double t = 2 * Math.PI * i / 13;
		            int k = (int) Math.round(a + r * Math.cos(t));
		            int l = (int) Math.round(b + r * Math.sin(t));
         
		            g2.rotate(6*t);
		            g2.fill(star);
		            g2.translate(5, 5);
		            
		            //g2.fillOval(k - r2, l - r2, 2 * r2, 2 * r2);  		         		           		       
		            
		        }
		    

		  }


     }


